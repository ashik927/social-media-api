{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "KX Fulfillment API",
    "description": "KX Fulfillment Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:7000",
  "basePath": "/inventory",
  "tags": [
    {
      "name": "Inventory",
      "description": "API for Inventory Management System"
    }
  ],
  "schemes": ["http", "https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/categories": {
      "get": {
        "tags": ["categories"],
        "summary": "Get all categories in system",
        "description": "Get all categories in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all categories for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Category"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["categories"],
        "summary": "Store Category in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store categories",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Category"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Category"
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["categories"],
        "summary": "Get specific category in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific category for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Category"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["categories"],
        "summary": "Update as existing category",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Category",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Category object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Category"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["categories"],
        "summary": "Delete category",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The category id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/categories/{page}/{pageSize}": {
      "get": {
        "tags": ["categories"],
        "summary": "Get all categories in system depends on page and pageSize",
        "description": "Get all categories in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all categories for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Category"
                }
              }
            }
          }
        ]
      }
    },
    "/categories/findCategories": {
      "get": {
        "tags": ["categories"],
        "summary": "Get all categories in system depends on status",
        "description": "",
        "operationId": "findCategoriesbyStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all categories for specific user",
            "type": "number"
          },
          {
            "name": "status",
            "in": "query",
            "description": "get all categories for specific user depends on status",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Category"
                }
              }
            }
          }
        ]
      }
    },
    "/categories/updateItembyCategory/{item_category_id}": {
      "put": {
        "tags": ["categories"],
        "summary": "Update as existing item category tax",
        "description": "",
        "operationId": "updateItembyCategory",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "item_category_id",
            "in": "path",
            "description": "category id form registerd item",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Category object that needs to be added to the update",
            "required": true,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definations/Category"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },

    "/attribute": {
      "get": {
        "tags": ["attributes"],
        "summary": "Get all attributes in system",
        "description": "Get all attributes in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all attributes for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Attribute"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["attributes"],
        "summary": "Store Attribute in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store attributes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Attribute"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Attribute"
              }
            }
          }
        }
      }
    },
    "/attribute/{id}": {
      "get": {
        "tags": ["attributes"],
        "summary": "Get specific attribute in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific attribute for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Attribute"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["attributes"],
        "summary": "Update as existing attribute",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Attribute",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Attribute object that needs to be added to the store.Please Do not use Array use Object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definations/Attribute"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["attributes"],
        "summary": "Delete attribute",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The attribute id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/attribute/{page}/{pageSize}": {
      "get": {
        "tags": ["attributes"],
        "summary": "Get all attributes in system depends on page and pageSize",
        "description": "Get all attributes in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all attributes for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Attribute"
                }
              }
            }
          }
        ]
      }
    },
    "/attribute/findAttributes": {
      "get": {
        "tags": ["attributes"],
        "summary": "Get all attributes in system depends on status",
        "description": "",
        "operationId": "findAttributesbyStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all attributes for specific user",
            "type": "number"
          },
          {
            "name": "status",
            "in": "query",
            "description": "get all attributes for specific user depends on status",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Attribute"
                }
              }
            }
          }
        ]
      }
    },

    "/items": {
      "get": {
        "tags": ["items"],
        "summary": "Get all items in system",
        "description": "Get all items in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all items for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Item"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["items"],
        "summary": "Store Item in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Item"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Item"
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "tags": ["items"],
        "summary": "Get specific item in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific item for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Item"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["items"],
        "summary": "Update as existing item",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Item",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store . Here is an array in the example. Please remove the array and only object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definations/Item"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["items"],
        "summary": "Delete item",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The item id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/items/{page}/{pageSize}": {
      "get": {
        "tags": ["items"],
        "summary": "Get all items in system depends on page and pageSize",
        "description": "Get all items in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all items for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Item"
                }
              }
            }
          }
        ]
      }
    },
    "/items/findTypedItem": {
      "get": {
        "tags": ["items"],
        "summary": "Get all items in system depends on type",
        "description": "",
        "operationId": "findTypedItem",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all attributes for specific user",
            "type": "number"
          },
          {
            "name": "type",
            "in": "query",
            "description": "get all items for specific user depends on type",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Item"
                }
              }
            }
          }
        ]
      }
    },

    "/warehouses": {
      "get": {
        "tags": ["warehouses"],
        "summary": "Get all warehouses in system",
        "description": "Get all warehouses in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all warehouses for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Warehouse"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["warehouses"],
        "summary": "Store warehouse in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store warehouse",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Warehouse"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Warehouse"
              }
            }
          }
        }
      }
    },
    "/warehouses/{id}": {
      "get": {
        "tags": ["warehouses"],
        "summary": "Get specific warehouse in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific warehouse for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Warehouse"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["warehouses"],
        "summary": "Update as existing warehouse",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Warehouse",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store.Here is an array in the example. Please remove the array and only object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definations/Warehouse"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["warehouses"],
        "summary": "Delete warehouse",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The warehouse id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/warehouses/{page}/{pageSize}": {
      "get": {
        "tags": ["warehouses"],
        "summary": "Get all warehouses in system depends on page and pageSize",
        "description": "Get all warehouses in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all warehouses for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Warehouse"
                }
              }
            }
          }
        ]
      }
    },
    "/loyalityPoint/{id}": {
      "get": {
        "tags": ["loyalityPoint"],
        "summary": "Get specific loyalityPoint in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific loyalityPoint for specific user.Here is an array in the example. Please remove the array and only object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/LoyalityPoint"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["loyalityPoint"],
        "summary": "Update as existing loyalityPoint",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Warehouse",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definations/LoyalityPoint"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["loyalityPoint"],
        "summary": "Delete loyalityPoint",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The warehouse id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/loyalityPoint": {
      "post": {
        "tags": ["loyalityPoint"],
        "summary": "Store loyalityPoint in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store loyalityPoint . Here is an array in the example. Please remove the array and only object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definations/LoyalityPoint"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/LoyalityPoint"
              }
            }
          }
        }
      }
    },
    "/loyalityPoint/findByClientId": {
      "get": {
        "tags": ["loyalityPoint"],
        "summary": "Get all loyalityPoint in system depends on type",
        "description": "",
        "operationId": "findByClientId",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all total loyalitypoint for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/LoyalityPoint"
                }
              }
            }
          }
        ]
      }
    },
    "/loyalityPoint/findAllPointByClientId": {
      "get": {
        "tags": ["loyalityPoint"],
        "summary": "Get all loyalityPoint in system depends on type",
        "description": "",
        "operationId": "findByClientId",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all Points for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/LoyalityPoint"
                }
              }
            }
          }
        ]
      }
    },
    "/template": {
      "get": {
        "tags": ["template"],
        "summary": "Get all template in system",
        "description": "Get all template in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all template for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Template"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["template"],
        "summary": "Store template in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store template",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Template"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Template"
              }
            }
          }
        }
      }
    },
    "/template/{id}": {
      "get": {
        "tags": ["template"],
        "summary": "Get specific template in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific template for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Template"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["template"],
        "summary": "Update as existing template",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded template",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Template"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["template"],
        "summary": "Delete template",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The template id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/template/{page}/{pageSize}": {
      "get": {
        "tags": ["template"],
        "summary": "Get all template in system depends on page and pageSize",
        "description": "Get all template in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all template for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Template"
                }
              }
            }
          }
        ]
      }
    },
    "/subSubcategory": {
      "get": {
        "tags": ["subSubcategory"],
        "summary": "Get all subSubcategory in system",
        "description": "Get all subSubcategory in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all subSubcategory for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubSubcategory"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["subSubcategory"],
        "summary": "Store subSubcategory in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store subSubcategory",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/SubSubcategory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/SubSubcategory"
              }
            }
          }
        }
      }
    },
    "/subSubcategory/{id}": {
      "get": {
        "tags": ["subSubcategory"],
        "summary": "Get specific subSubcategory in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific subSubcategory for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubSubcategory"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["subSubcategory"],
        "summary": "Update as existing subSubcategory",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded subSubcategory",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/SubSubcategory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["subSubcategory"],
        "summary": "Delete subSubcategory",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The subSubcategory id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/subSubcategory/{page}/{pageSize}": {
      "get": {
        "tags": ["subSubcategory"],
        "summary": "Get all subSubcategory in system depends on page and pageSize",
        "description": "Get all subSubcategory in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all subSubcategory for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubSubcategory"
                }
              }
            }
          }
        ]
      }
    },
    "/subCategory": {
      "get": {
        "tags": ["subCategory"],
        "summary": "Get all subCategory in system",
        "description": "Get all subCategory in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all subCategory for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubCategory"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["subCategory"],
        "summary": "Store subCategory in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store subCategory",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/SubCategory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/SubCategory"
              }
            }
          }
        }
      }
    },
    "/subCategory/{id}": {
      "get": {
        "tags": ["subCategory"],
        "summary": "Get specific subCategory in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific subCategory for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubCategory"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["subCategory"],
        "summary": "Update as existing subCategory",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded subCategory",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/SubCategory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["subCategory"],
        "summary": "Delete subCategory",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The subCategory id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/subCategory/{page}/{pageSize}": {
      "get": {
        "tags": ["subCategory"],
        "summary": "Get all subCategory in system depends on page and pageSize",
        "description": "Get all subCategory in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all subCategory for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubCategory"
                }
              }
            }
          }
        ]
      }
    },
    "/subCategory/findSubCategories": {
      "get": {
        "tags": ["subCategory"],
        "summary": "Get all subCategory in system depends on page and pageSize",
        "description": "Get all subCategory in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all subCategory for specific user",
            "type": "number"
          },
          {
            "name": "status",
            "in": "query",
            "description": "get all subCategory for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SubCategory"
                }
              }
            }
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Get all user in system",
        "description": "Get all user in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/User"
                }
              }
            }
          }
        ]
      }
    },
    "/user/existUser": {
      "get": {
        "tags": ["user"],
        "summary": "Get specefic user in system depends on user name",
        "description": "Get specefic user in system by using userName",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "get specific user",
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/User"
                }
              }
            }
          }
        ]
      }
    },
    "/user/existEmail": {
      "get": {
        "tags": ["user"],
        "summary": "Get specefic user in system depends on Email",
        "description": "Get Specific user in system by using Email",
        "operationId": "existEmail",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "get specific user",
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/User"
                }
              }
            }
          }
        ]
      }
    },
    "/user/validUser": {
      "get": {
        "tags": ["user"],
        "summary": "Get validUser  in system depends on Email and passworf",
        "description": "Get validUser  in system by using Email",
        "operationId": "validUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "get specific user",
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "get specific user",
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/User"
                }
              }
            }
          }
        ]
      }
    },
    "/user/createUser": {
      "post": {
        "tags": ["user"],
        "summary": "Create User in system depends on Email and passworf",
        "description": "Create User  in system by using Email",
        "operationId": "createUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store User",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/User"
              }
            }
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/User"
                }
              }
            }
          }
        ]
      }
    },
    "/weight": {
      "get": {
        "tags": ["weight"],
        "summary": "Get all weight in system",
        "description": "Get all weight in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all weight for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Weight"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["weight"],
        "summary": "Store weight in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store weight",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Weight"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Weight"
              }
            }
          }
        }
      }
    },
    "/weight/{id}": {
      "get": {
        "tags": ["weight"],
        "summary": "Get specific Weight in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific Weight for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Weight"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["weight"],
        "summary": "Update as existing Weight",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Weight",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Weight"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["weight"],
        "summary": "Delete weight",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The weight id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/weight/{page}/{pageSize}": {
      "get": {
        "tags": ["weight"],
        "summary": "Get all weight in system depends on page and pageSize",
        "description": "Get all weight in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all weight for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Weight"
                }
              }
            }
          }
        ]
      }
    },
    "/weight/findWeight": {
      "get": {
        "tags": ["weight"],
        "summary": "Get weight  in system depends on status and client id",
        "description": "Get weight  in system depends on status and client id",
        "operationId": "findWeight",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific weight",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific weight",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Weight"
                }
              }
            }
          }
        ]
      }
    },
    "/paymentMethodType": {
      "get": {
        "tags": ["paymentMethodType"],
        "summary": "Get all paymentMethodType in system",
        "description": "Get all paymentMethodType in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all paymentMethodType for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethodType"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["paymentMethodType"],
        "summary": "Store paymentMethodType in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store weight",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PaymentMethodType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PaymentMethodType"
              }
            }
          }
        }
      }
    },
    "/paymentMethodType/{id}": {
      "get": {
        "tags": ["paymentMethodType"],
        "summary": "Get specific paymentMethodType in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific paymentMethodType for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethodType"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["paymentMethodType"],
        "summary": "Update as existing paymentMethodType",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded PaymentMethodType",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PaymentMethodType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["paymentMethodType"],
        "summary": "Delete paymentMethodType",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The paymentMethodType id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/paymentMethodType/{page}/{pageSize}": {
      "get": {
        "tags": ["paymentMethodType"],
        "summary": "Get all paymentMethodType in system depends on page and pageSize",
        "description": "Get all paymentMethodType in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all paymentMethodType for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethodType"
                }
              }
            }
          }
        ]
      }
    },
    "/paymentMethodType/findPaymentMethodTypes": {
      "get": {
        "tags": ["paymentMethodType"],
        "summary": "Get paymentMethodType  in system depends on status and client id",
        "description": "Get paymentMethodType  in system depends on status and client id",
        "operationId": "findPaymentMethodTypes",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific paymentMethodType",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific paymentMethodType",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethodType"
                }
              }
            }
          }
        ]
      }
    },
    "/brand": {
      "get": {
        "tags": ["brand"],
        "summary": "Get all brand in system",
        "description": "Get all brand in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all brand for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Brand"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["brand"],
        "summary": "Store brand in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store weight",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Brand"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Brand"
              }
            }
          }
        }
      }
    },
    "/brand/{id}": {
      "get": {
        "tags": ["brand"],
        "summary": "Get specific brand in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific brand for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Brand"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["brand"],
        "summary": "Update as existing brand",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded brand",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Brand"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["brand"],
        "summary": "Delete brand",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The brand id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/brand/{page}/{pageSize}": {
      "get": {
        "tags": ["brand"],
        "summary": "Get all brand in system depends on page and pageSize",
        "description": "Get all brand in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all brand for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Brand"
                }
              }
            }
          }
        ]
      }
    },
    "/brand/findByStatus": {
      "get": {
        "tags": ["brand"],
        "summary": "Get brand  in system depends on status and client id",
        "description": "Get brand  in system depends on status and client id",
        "operationId": "findByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific paymentMethodType",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific paymentMethodType",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Brand"
                }
              }
            }
          }
        ]
      }
    },
    "/manufacture": {
      "get": {
        "tags": ["manufacture"],
        "summary": "Get all manufacture in system",
        "description": "Get all manufacture in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all manufacture for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Manufacture"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["manufacture"],
        "summary": "Store manufacture in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store weight",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Manufacture"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Manufacture"
              }
            }
          }
        }
      }
    },
    "/manufacture/{id}": {
      "get": {
        "tags": ["manufacture"],
        "summary": "Get specific manufacture in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific manufacture for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Manufacture"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["manufacture"],
        "summary": "Update as existing brand",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded manufacture",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Manufacture"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["manufacture"],
        "summary": "Delete manufacture",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The manufacture id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/manufacture/{page}/{pageSize}": {
      "get": {
        "tags": ["manufacture"],
        "summary": "Get all manufacture in system depends on page and pageSize",
        "description": "Get all manufacture in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all manufacture for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Manufacture"
                }
              }
            }
          }
        ]
      }
    },
    "/manufacture/findByStatus": {
      "get": {
        "tags": ["manufacture"],
        "summary": "Get manufacture  in system depends on status and client id",
        "description": "Get manufacture  in system depends on status and client id",
        "operationId": "findByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific manufacture",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific manufacture",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Manufacture"
                }
              }
            }
          }
        ]
      }
    },
    "/reason": {
      "get": {
        "tags": ["reason"],
        "summary": "Get all reason in system",
        "description": "Get all reason in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all reason for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Reason"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["reason"],
        "summary": "Store reason in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "reason weight",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Reason"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Reason"
              }
            }
          }
        }
      }
    },
    "/reason/{id}": {
      "get": {
        "tags": ["reason"],
        "summary": "Get specific reason in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific reason for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Reason"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["reason"],
        "summary": "Update as existing brand",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded reason",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Reason"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["reason"],
        "summary": "Delete reason",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The manufacture id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/reason/{page}/{pageSize}": {
      "get": {
        "tags": ["reason"],
        "summary": "Get all reason in system depends on page and pageSize",
        "description": "Get all reason in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all reason for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Reason"
                }
              }
            }
          }
        ]
      }
    },
    "/reason/findByStatus": {
      "get": {
        "tags": ["reason"],
        "summary": "Get reason  in system depends on status and client id",
        "description": "Get reason  in system depends on status and client id",
        "operationId": "findByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific reason",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific reason",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Reason"
                }
              }
            }
          }
        ]
      }
    },
    "/deliveryPackage": {
      "get": {
        "tags": ["deliveryPackage"],
        "summary": "Get all deliveryPackage in system",
        "description": "Get all deliveryPackage in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all deliveryPackage for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPackage"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["deliveryPackage"],
        "summary": "Store deliveryPackage in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store deliveryPackage",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/DeliveryPackage"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/DeliveryPackage"
              }
            }
          }
        }
      }
    },
    "/deliveryPackage/{id}": {
      "get": {
        "tags": ["deliveryPackage"],
        "summary": "Get specific deliveryPackage in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific deliveryPackage for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPackage"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["deliveryPackage"],
        "summary": "Update as existing deliveryPackage",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded deliveryPackage",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/DeliveryPackage"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["deliveryPackage"],
        "summary": "Delete deliveryPackage",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The deliveryPackage id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/deliveryPackage/{page}/{pageSize}": {
      "get": {
        "tags": ["deliveryPackage"],
        "summary": "Get all deliveryPackage in system depends on page and pageSize",
        "description": "Get all deliveryPackage in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all deliveryPackage for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPackage"
                }
              }
            }
          }
        ]
      }
    },
    "/deliveryPartner": {
      "get": {
        "tags": ["deliveryPartner"],
        "summary": "Get all deliveryPartner in system",
        "description": "Get all deliveryPartner in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all deliveryPartner for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPartner"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["deliveryPartner"],
        "summary": "Store deliveryPartner in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Store deliveryPartner",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/DeliveryPartner"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/DeliveryPartner"
              }
            }
          }
        }
      }
    },
    "/deliveryPartner/{id}": {
      "get": {
        "tags": ["deliveryPartner"],
        "summary": "Get specific deliveryPartner in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific deliveryPartner for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPartner"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["deliveryPartner"],
        "summary": "Update as existing brand",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded deliveryPartner",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/DeliveryPartner"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["deliveryPartner"],
        "summary": "Delete deliveryPartner",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The deliveryPartner id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/deliveryPartner/{page}/{pageSize}": {
      "get": {
        "tags": ["deliveryPartner"],
        "summary": "Get all deliveryPartner in system depends on page and pageSize",
        "description": "Get all deliveryPartner in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all deliveryPartner for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPartner"
                }
              }
            }
          }
        ]
      }
    },
    "/deliveryPartner/findByStatus": {
      "get": {
        "tags": ["deliveryPartner"],
        "summary": "Get deliveryPartner  in system depends on status and client id",
        "description": "Get deliveryPartner  in system depends on status and client id",
        "operationId": "findByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific deliveryPartner",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific deliveryPartner",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DeliveryPartner"
                }
              }
            }
          }
        ]
      }
    },
    "/paymentMethod": {
      "get": {
        "tags": ["paymentMethod"],
        "summary": "Get all paymentMethod in system",
        "description": "Get all paymentMethod in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all paymentMethod for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethod"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["paymentMethod"],
        "summary": "Store paymentMethod in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Store paymentMethod",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PaymentMethod"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PaymentMethod"
              }
            }
          }
        }
      }
    },
    "/paymentMethod/{id}": {
      "get": {
        "tags": ["paymentMethod"],
        "summary": "Get specific paymentMethod in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific paymentMethod for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethod"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["paymentMethod"],
        "summary": "Update as existing brand",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded paymentMethod",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PaymentMethod"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["paymentMethod"],
        "summary": "Delete paymentMethod",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The paymentMethod id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/paymentMethod/{page}/{pageSize}": {
      "get": {
        "tags": ["paymentMethod"],
        "summary": "Get all paymentMethod in system depends on page and pageSize",
        "description": "Get all paymentMethod in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all paymentMethod for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethod"
                }
              }
            }
          }
        ]
      }
    },
    "/paymentMethod/findByStatus": {
      "get": {
        "tags": ["paymentMethod"],
        "summary": "Get paymentMethod  in system depends on status and client id",
        "description": "Get paymentMethod  in system depends on status and client id",
        "operationId": "findByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific paymentMethod",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific paymentMethod",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentMethod"
                }
              }
            }
          }
        ]
      }
    },
    "/unit": {
      "get": {
        "tags": ["unit"],
        "summary": "Get all unit in system",
        "description": "Get all unit in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all unit for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Unit"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["unit"],
        "summary": "Store unit in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Store unit",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Unit"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Unit"
              }
            }
          }
        }
      }
    },
    "/unit/{id}": {
      "get": {
        "tags": ["unit"],
        "summary": "Get specific unit in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific unit for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Unit"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["unit"],
        "summary": "Update as existing brand",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded unit",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Item object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Unit"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["unit"],
        "summary": "Delete unit",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unit id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/unit/{page}/{pageSize}": {
      "get": {
        "tags": ["unit"],
        "summary": "Get all unit in system depends on page and pageSize",
        "description": "Get all unit in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all unit for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Unit"
                }
              }
            }
          }
        ]
      }
    },
    "/unit/findByStatus": {
      "get": {
        "tags": ["unit"],
        "summary": "Get unit  in system depends on status and client id",
        "description": "Get unit  in system depends on status and client id",
        "operationId": "findByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "get specific unit",
            "type": "number"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "get specific unit",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Unit"
                }
              }
            }
          }
        ]
      }
    },
    "/tax": {
      "get": {
        "tags": ["tax"],
        "summary": "Get all tax in system",
        "description": "Get all tax in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tax for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tax"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["tax"],
        "summary": "Store warehouse in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store tax",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tax"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tax"
              }
            }
          }
        }
      }
    },
    "/tax/{id}": {
      "get": {
        "tags": ["tax"],
        "summary": "Get specific tax in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific tax for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tax"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["tax"],
        "summary": "Update as existing tax",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Tax",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Tax object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tax"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["tax"],
        "summary": "Delete tax",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tax id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/tax/{page}/{pageSize}": {
      "get": {
        "tags": ["tax"],
        "summary": "Get all tax in system depends on page and pageSize",
        "description": "Get all tax in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tax for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tax"
                }
              }
            }
          }
        ]
      }
    },

    "/tags": {
      "get": {
        "tags": ["tags"],
        "summary": "Get all tags in system",
        "description": "Get all tags in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tags for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tag"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["tags"],
        "summary": "Store tags in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store tag",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tag"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tag"
              }
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": ["tags"],
        "summary": "Get specific tag in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific tag for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tag"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["tags"],
        "summary": "Update as existing tag",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Tag",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Tag object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tax"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["tags"],
        "summary": "Delete tag",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tag id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/tags/{page}/{pageSize}": {
      "get": {
        "tags": ["tags"],
        "summary": "Get all tags in system depends on page and pageSize",
        "description": "Get all tag in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tag for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tag"
                }
              }
            }
          }
        ]
      }
    },
    "/tags/findTags": {
      "get": {
        "tags": ["tags"],
        "summary": "Get all tags in system depends on status",
        "description": "",
        "operationId": "findTagsbyStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tags for specific user",
            "type": "number"
          },
          {
            "name": "status",
            "in": "query",
            "description": "get all tags for specific user depends on status",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tag"
                }
              }
            }
          }
        ]
      }
    },

    "/vendor": {
      "get": {
        "tags": ["vendor"],
        "summary": "Get all vendor in system",
        "description": "Get all vendor in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all vendor for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Vendor"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["vendor"],
        "summary": "Store vendor in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store vendor",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Vendor"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Vendor"
              }
            }
          }
        }
      }
    },
    "/vendor/{id}": {
      "get": {
        "tags": ["vendor"],
        "summary": "Get specific vendor in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific vendor for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Vendor"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["vendor"],
        "summary": "Update as existing vendor",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Vendor",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Vendor object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Vendor"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["vendor"],
        "summary": "Delete vendor",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The vendor id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/vendor/{page}/{pageSize}": {
      "get": {
        "tags": ["vendor"],
        "summary": "Get all vendor in system depends on page and pageSize",
        "description": "Get all vendor in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all vendor for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Vendor"
                }
              }
            }
          }
        ]
      }
    },
    "/customer": {
      "get": {
        "tags": ["customer"],
        "summary": "Get all customer in system",
        "description": "Get all customer in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all customer for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Customer"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["customer"],
        "summary": "Store customer in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store customer",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Customer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Customer"
              }
            }
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": ["customer"],
        "summary": "Get specific customer in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific customer for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Customer"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["customer"],
        "summary": "Update as existing customer",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Customer",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Customer object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Customer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["customer"],
        "summary": "Delete customer",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The customer id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/customer/{page}/{pageSize}": {
      "get": {
        "tags": ["customer"],
        "summary": "Get all customer in system depends on page and pageSize",
        "description": "Get all customer in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all customer for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Customer"
                }
              }
            }
          }
        ]
      }
    },
    "/customer/exist": {
      "get": {
        "tags": ["customer"],
        "summary": "Get all exist customer in system depends on status",
        "description": "",
        "operationId": "findExistCustomerID",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all exist customer for specific user",
            "type": "number"
          },
          {
            "name": "customer_id_number",
            "in": "query",
            "description": "get all exist customer for specific user depends on status",
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Customer"
                }
              }
            }
          }
        ]
      }
    },

    "/tooltips": {
      "get": {
        "tags": ["tooltips"],
        "summary": "Get all tooltips in system",
        "description": "Get all tooltips in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tooltip for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tooltip"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["tooltips"],
        "summary": "Store tooltip in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store tooltip",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tooltip"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tooltip"
              }
            }
          }
        }
      }
    },
    "/tooltips/{id}": {
      "get": {
        "tags": ["tooltips"],
        "summary": "Get specific tooltip in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific tooltip for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tooltip"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["tooltips"],
        "summary": "Update as existing tooltip",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded Tooltip",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Tooltip object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/Tooltip"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["tooltips"],
        "summary": "Delete tooltip",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The tooltip id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/tooltips/{page}/{pageSize}": {
      "get": {
        "tags": ["tooltips"],
        "summary": "Get all tooltip in system depends on page and pageSize",
        "description": "Get all tooltip in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all tooltip for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Tooltip"
                }
              }
            }
          }
        ]
      }
    },

    "/mailTemplate": {
      "get": {
        "tags": ["mailTemplate"],
        "summary": "Get all mailTemplate in system",
        "description": "Get all mailTemplate in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all mailTemplate for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/MailTemplate"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["mailTemplate"],
        "summary": "Store mailTemplate in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store mailTemplate",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/MailTemplate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/MailTemplate"
              }
            }
          }
        }
      }
    },
    "/mailTemplate/{id}": {
      "get": {
        "tags": ["mailTemplate"],
        "summary": "Get specific mailTemplate in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific mailTemplate for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/MailTemplate"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["mailTemplate"],
        "summary": "Update as existing mailTemplate",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded MailTemplate",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "MailTemplate object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/MailTemplate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["mailTemplate"],
        "summary": "Delete mailTemplate",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The mailTemplate id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/mailTemplate/{page}/{pageSize}": {
      "get": {
        "tags": ["mailTemplate"],
        "summary": "Get all mailTemplate in system depends on page and pageSize",
        "description": "Get all mailTemplate in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all mailTemplate for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/MailTemplate"
                }
              }
            }
          }
        ]
      }
    },

    "/purchaseOrders": {
      "get": {
        "tags": ["purchaseOrders"],
        "summary": "Get all purchaseOrders in system",
        "description": "Get all purchaseOrders in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all purchaseOrders for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseOrders"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["purchaseOrders"],
        "summary": "Store purchaseOrders in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store purchaseOrders",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PurchaseOrders"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PurchaseOrders"
              }
            }
          }
        }
      }
    },
    "/purchaseOrders/{id}": {
      "get": {
        "tags": ["purchaseOrders"],
        "summary": "Get specific purchaseOrders in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific purchaseOrders for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseOrders"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrders"],
        "summary": "Update as existing purchaseOrders",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded PurchaseOrders",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "PurchaseOrders object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PurchaseOrders"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["purchaseOrders"],
        "summary": "Delete purchaseOrders",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The purchaseOrders id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/purchaseOrders/{page}/{pageSize}": {
      "get": {
        "tags": ["purchaseOrders"],
        "summary": "Get all purchaseOrders in system depends on page and pageSize",
        "description": "Get all purchaseOrders in system by using pagenation",
        "operationId": "findByPagination",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all purchaseOrders for specific user",
            "type": "number"
          },
          {
            "name": "page",
            "in": "path",
            "description": "User want to see which page record",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "User want to see the number of records",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseOrders"
                }
              }
            }
          }
        ]
      },
      "/purchaseOrders/exist": {
        "get": {
          "tags": ["purchaseOrders"],
          "summary": "Get all exist purchaseOrder in system depends on status",
          "description": "",
          "operationId": "findExistingPurchaseOrder",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all exist purchaseOrder for specific user",
              "type": "number"
            },
            {
              "name": "po_number",
              "in": "query",
              "description": "get all exist purchaseOrder for specific user depends on status",
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/PurchaseOrders"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "/purchaseReceive": {
      "get": {
        "tags": ["purchaseReceive"],
        "summary": "Get all purchaseReceive in system",
        "description": "Get all purchaseReceive in system",
        "operationId": "findAll",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all purchaseReceive for specific user",
            "type": "number"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseReceive"
                }
              }
            }
          }
        ]
      },
      "post": {
        "tags": ["purchaseReceive"],
        "summary": "Store purchaseReceive in system",
        "description": "",
        "operationId": "store",
        "consumes": ["application/json"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store purchaseReceive",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PurchaseReceive"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PurchaseReceive"
              }
            }
          }
        }
      }
    },
    "/purchaseReceive/{id}": {
      "get": {
        "tags": ["purchaseReceive"],
        "summary": "Get specific purchaseReceive in system",
        "description": "",
        "operationId": "findById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "get specific purchaseReceive for specific user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseReceive"
                }
              }
            }
          }
        ]
      },
      "put": {
        "tags": ["purchaseReceive"],
        "summary": "Update as existing purchaseReceive",
        "description": "",
        "operationId": "update",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The is of the recorded PurchaseReceive",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "PurchaseReceive object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definations/PurchaseReceive"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["purchaseReceive"],
        "summary": "Delete purchaseReceive",
        "description": "This can only be done by the logged in user.",
        "operationId": "destroy",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The purchaseReceive id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/purchaseReceive/exist": {
      "get": {
        "tags": ["purchaseReceive"],
        "summary": "Get all exist purchaseOrder in system depends on exist",
        "description": "",
        "operationId": "findExistingPurchaseReceive",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all exist purchaseReceive for specific user",
            "type": "number"
          },
          {
            "name": "pr_number",
            "in": "query",
            "description": "get all exist purchaseReceive for specific user depends on exist",
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseReceive"
                }
              }
            }
          }
        ]
      }
    },
    "/purchaseReceive/findByPO": {
      "get": {
        "tags": ["purchaseReceive"],
        "summary": "Get all exist purchaseReceive in system depends on PO",
        "description": "",
        "operationId": "findPurchaseReceivebyPurchaseOrder",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "get all exist purchaseReceive for specific user",
            "type": "number"
          },
          {
            "name": "pr_number",
            "in": "query",
            "description": "get all exist purchaseReceive for specific user depends on PO",
            "type": "string"
          }
        ],
        "responses": [
          {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PurchaseReceive"
                }
              }
            }
          }
        ]
      }
    },
    "/paymentTerm": {
        "get": {
          "tags": ["paymentTerm"],
          "summary": "Get all paymentTerm in system",
          "description": "Get all paymentTerm in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all paymentTerm for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/PaymentTerm"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["paymentTerm"],
          "summary": "Store paymentTerm in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store PaymentTerm",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentTerm"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentTerm"
                }
              }
            }
          }
        }
    },
    "/paymentTerm/{id}": {
        "get": {
          "tags": ["paymentTerm"],
          "summary": "Get specific paymentTerm in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific paymentTerm for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/PaymentTerm"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["paymentTerm"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded paymentTerm",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/PaymentTerm"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["paymentTerm"],
          "summary": "Delete paymentTerm",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The unit id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
    },
    "/paymentTerm/{page}/{pageSize}": {
        "get": {
          "tags": ["paymentTerm"],
          "summary": "Get all paymentTerm in system depends on page and pageSize",
          "description": "Get all paymentTerm in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all paymentTerm for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/PaymentTerm"
                  }
                }
              }
            }
          ]
        }
    },
    "/paymentTerm/findByStatus": {
        "get": {
          "tags": ["paymentTerm"],
          "summary": "Get paymentTerm  in system depends on status and client id",
          "description": "Get paymentTerm  in system depends on status and client id",
          "operationId": "findByStatus",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "get specific paymentTerm",
              "type": "number"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific paymentTerm",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/PaymentTerm"
                  }
                }
              }
            }
          ]
        }
    },
    "/shippingPreferences": {
        "get": {
          "tags": ["shippingPreferences"],
          "summary": "Get all shippingPreferences in system",
          "description": "Get all shippingPreferences in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all shippingPreferences for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ShippingPreferences"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["shippingPreferences"],
          "summary": "Store shippingPreferences in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store shippingPreferences",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ShippingPreferences"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ShippingPreferences"
                }
              }
            }
          }
        }
    },
    "/shippingPreferences/{id}": {
        "get": {
          "tags": ["shippingPreferences"],
          "summary": "Get specific shippingPreferences in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific shippingPreferences for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ShippingPreferences"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["shippingPreferences"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded shippingPreferences",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ShippingPreferences"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["shippingPreferences"],
          "summary": "Delete shippingPreferences",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The shippingPreferences id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
    },
    "/shippingPreferences/{page}/{pageSize}": {
        "get": {
          "tags": ["shippingPreferences"],
          "summary": "Get all shippingPreferences in system depends on page and pageSize",
          "description": "Get all shippingPreferences in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all shippingPreferences for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ShippingPreferences"
                  }
                }
              }
            }
          ]
        }
    },
      "/shippingPreferences/findshippingpreferences": {
        "get": {
          "tags": ["shippingPreferences"],
          "summary": "Get shippingPreferences  in system depends on status and client id",
          "description": "Get shippingPreferences  in system depends on status and client id",
          "operationId": "findshippingpreferences",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "get specific shippingPreferences",
              "type": "number"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific shippingPreferences",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ShippingPreferences"
                  }
                }
              }
            }
          ]
        }
      },
      "/loyalityorreedem": {
        "get": {
          "tags": ["loyalityorreedem"],
          "summary": "Get all loyalityorreedem in system",
          "description": "Get all loyalityorreedem in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all loyalityorreedem for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Loyalityorreedem"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["loyalityorreedem"],
          "summary": "Store loyalityorreedem in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store loyalityorreedem",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Loyalityorreedem"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Loyalityorreedem"
                }
              }
            }
          }
        }
      },
      "/loyalityorreedem/{id}": {
        "get": {
          "tags": ["loyalityorreedem"],
          "summary": "Get specific loyalityorreedem in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific loyalityorreedem for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Loyalityorreedem"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["loyalityorreedem"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded loyalityorreedem",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Loyalityorreedem"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["loyalityorreedem"],
          "summary": "Delete loyalityorreedem",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The loyalityorreedem id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/loyalityorreedem/{page}/{pageSize}": {
        "get": {
          "tags": ["loyalityorreedem"],
          "summary": "Get all loyalityorreedem in system depends on page and pageSize",
          "description": "Get all loyalityorreedem in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all loyalityorreedem for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Loyalityorreedem"
                  }
                }
              }
            }
          ]
        }
      },
      "/campaign": {
        "get": {
          "tags": ["campaign"],
          "summary": "Get all campaign in system",
          "description": "Get all campaign in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all campaign for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Campaign"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["campaign"],
          "summary": "Store campaign in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store campaign",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Campaign"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Campaign"
                }
              }
            }
          }
        }
      },
      "/campaign/{id}": {
        "get": {
          "tags": ["campaign"],
          "summary": "Get specific campaign in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific campaign for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Campaign"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["campaign"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded campaign",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Campaign"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["campaign"],
          "summary": "Delete campaign",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The campaign id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/campaign/{page}/{pageSize}": {
        "get": {
          "tags": ["campaign"],
          "summary": "Get all campaign in system depends on page and pageSize",
          "description": "Get all campaign in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all campaign for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Campaign"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemWarehouses": {
        "get": {
          "tags": ["itemWarehouses"],
          "summary": "Get all itemWarehouses in system",
          "description": "Get all itemWarehouses in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all itemWarehouses for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemWarehouses"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["itemWarehouses"],
          "summary": "Store itemWarehouses in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store itemWarehouses",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemWarehouses"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemWarehouses"
                }
              }
            }
          }
        }
      },
      "/itemWarehouses/{id}": {
        "get": {
          "tags": ["itemWarehouses"],
          "summary": "Get specific itemWarehouses in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific itemWarehouses for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemWarehouses"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["itemWarehouses"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded itemWarehouses",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemWarehouses"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["itemWarehouses"],
          "summary": "Delete itemWarehouses",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The unit id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/itemWarehouses/{page}/{pageSize}": {
        "get": {
          "tags": ["itemWarehouses"],
          "summary": "Get all itemWarehouses in system depends on page and pageSize",
          "description": "Get all itemWarehouses in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all itemWarehouses for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemWarehouses"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemWarehouses/findByWarehouse": {
        "get": {
          "tags": ["itemWarehouses"],
          "summary": "Get itemWarehouses  in system depends on status and client id",
          "description": "Get itemWarehouses  in system depends on status and client id",
          "operationId": "findByWarehouse",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "warehouse_id",
              "in": "query",
              "description": "get specific itemWarehouses",
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific itemWarehouses",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemWarehouses"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemDiscount": {
        "get": {
          "tags": ["itemDiscount"],
          "summary": "Get all itemDiscount in system",
          "description": "Get all itemDiscount in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all itemDiscount for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemDiscount"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["itemDiscount"],
          "summary": "Store itemDiscount in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store itemDiscount",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemDiscount"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemDiscount"
                }
              }
            }
          }
        }
      },
      "/itemDiscount/{id}": {
        "get": {
          "tags": ["itemDiscount"],
          "summary": "Get specific itemDiscount in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific itemDiscount for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemDiscount"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["itemDiscount"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded itemDiscount",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemDiscount"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["itemDiscount"],
          "summary": "Delete itemDiscount",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The unit id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/itemDiscount/{page}/{pageSize}": {
        "get": {
          "tags": ["itemDiscount"],
          "summary": "Get all itemDiscount in system depends on page and pageSize",
          "description": "Get all itemDiscount in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all itemDiscount for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemDiscount"
                  }
                }
              }
            }
          ]
        }
      },
      "/discountManager": {
        "get": {
          "tags": ["discountManager"],
          "summary": "Get all discountManager in system",
          "description": "Get all discountManager in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all discountManager for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/DiscountManager"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["discountManager"],
          "summary": "Store discountManager in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store discountManager",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DiscountManager"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DiscountManager"
                }
              }
            }
          }
        }
      },
      "/discountManager/{id}": {
        "get": {
          "tags": ["discountManager"],
          "summary": "Get specific discountManager in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific discountManager for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/DiscountManager"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["discountManager"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded discountManager",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/DiscountManager"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["discountManager"],
          "summary": "Delete discountManager",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The unit id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/discountManager/{page}/{pageSize}": {
        "get": {
          "tags": ["discountManager"],
          "summary": "Get all discountManager in system depends on page and pageSize",
          "description": "Get all discountManager in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all discountManager for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/DiscountManager"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemInventory": {
        "get": {
          "tags": ["itemInventory"],
          "summary": "Get all itemInventory in system",
          "description": "Get all itemInventory in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all itemInventory for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemInventory"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["itemInventory"],
          "summary": "Store itemInventory in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store itemInventory",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemInventory"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemInventory"
                }
              }
            }
          }
        }
      },
      "/itemInventory/{id}": {
        "get": {
          "tags": ["itemInventory"],
          "summary": "Get specific itemInventory in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemInventory"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemInventory/findBy": {
        "get": {
          "tags": ["itemInventory"],
          "summary": "Get specific itemInventory in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "inventory_type",
              "in": "query",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "po_or_so_number",
              "in": "query",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemInventory"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemInventory/updateOrdered": {
        "put": {
          "tags": ["itemInventory"],
          "summary": "Get specific itemInventory in system",
          "description": "",
          "operationId": "updateOrdered",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "inventory_type",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "item",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "po_or_so_number",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            },
            {
              "name": "ordered",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemInventory"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemInventory/updateReceivedOrPackaged": {
        "put": {
          "tags": ["itemInventory"],
          "summary": "Get specific itemInventory in system",
          "description": "",
          "operationId": "updateReceivedOrPackaged",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "inventory_type",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "item",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "po_or_so_number",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            },
            {
              "name": "received_or_packaged",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemInventory"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemInventory/updateBillOrInvoiced": {
        "put": {
          "tags": ["itemInventory"],
          "summary": "Get specific itemInventory in system",
          "description": "",
          "operationId": "updateReceivedOrPackaged",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "inventory_type",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "item",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "po_or_so_number",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            },
            {
              "name": "bill_or_invoiced",
              "in": "body",
              "description": "get specific itemInventory for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemInventory"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemStock": {
        "get": {
          "tags": ["itemStock"],
          "summary": "Get all itemStock in system",
          "description": "Get all itemStock in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all itemStock for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemStock"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["itemStock"],
          "summary": "Store itemStock in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store itemStock",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemStock"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/ItemStock"
                }
              }
            }
          }
        }
      },
      "/itemStock/{id}": {
        "get": {
          "tags": ["itemStock"],
          "summary": "Get specific itemStock in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemStock"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemStock/delete": {
        "delete": {
          "tags": ["itemStock"],
          "summary": "Get specific itemStock in system",
          "description": "",
          "operationId": "delete",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "warehouse_id",
              "in": "body",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "stock_type",
              "in": "body",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "po_or_so_number",
              "in": "body",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "body",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemStock"
                  }
                }
              }
            }
          ]
        }
      },
      "/itemStock/findStockbyItem": {
        "get": {
          "tags": ["itemStock"],
          "summary": "Get specific itemStock in system",
          "description": "",
          "operationId": "findStockbyItem",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "item",
              "in": "query",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "warehouse_id",
              "in": "query",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific itemStock for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/ItemStock"
                  }
                }
              }
            }
          ]
        }
      },
      "/invoice": {
        "get": {
          "tags": ["invoice"],
          "summary": "Get all invoice in system",
          "description": "Get all invoice in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all invoice for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Invoice"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["invoice"],
          "summary": "Store invoice in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store invoice",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Invoice"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Invoice"
                }
              }
            }
          }
        }
      },
      "/invoice/{id}": {
        "get": {
          "tags": ["invoice"],
          "summary": "Get specific invoice in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific invoice for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Invoice"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["invoice"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded invoice",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Invoice"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["invoice"],
          "summary": "Delete invoice",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The invoice id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/invoice/{page}/{pageSize}": {
        "get": {
          "tags": ["invoice"],
          "summary": "Get all invoice in system depends on page and pageSize",
          "description": "Get all invoice in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all invoice for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Invoice"
                  }
                }
              }
            }
          ]
        }
      },
      "/invoice/exist": {
        "get": {
          "tags": ["invoice"],
          "summary": "Get specific invoice in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "invoice_number",
              "in": "query",
              "description": "get specific invoice for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific invoice for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Invoice"
                  }
                }
              }
            }
          ]
        }
      },
      "/invoice/getByOrderID": {
        "get": {
          "tags": ["invoice"],
          "summary": "Get specific invoice in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "order_number",
              "in": "query",
              "description": "get specific invoice for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific invoice for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Invoice"
                  }
                }
              }
            }
          ]
        }
      },
      "/salesOrder": {
        "get": {
          "tags": ["salesOrder"],
          "summary": "Get all salesOrder in system",
          "description": "Get all salesOrder in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all salesOrder for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesOrder"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["salesOrder"],
          "summary": "Store salesOrder in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store salesOrder",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SalesOrder"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SalesOrder"
                }
              }
            }
          }
        }
      },
      "/salesOrder/{id}": {
        "get": {
          "tags": ["salesOrder"],
          "summary": "Get specific salesOrder in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific salesOrder for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesOrder"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["salesOrder"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded salesOrder",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SalesOrder"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["salesOrder"],
          "summary": "Delete salesOrder",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The salesOrder id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/salesOrder/{page}/{pageSize}": {
        "get": {
          "tags": ["salesOrder"],
          "summary": "Get all salesOrder in system depends on page and pageSize",
          "description": "Get all salesOrder in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all salesOrder for specific user",
              "type": "number"
            },
            {
              "name": "status",
              "in": "query",
              "description": "get all salesOrder for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesOrder"
                  }
                }
              }
            }
          ]
        }
      },
      "/salesOrder/exist": {
        "get": {
          "tags": ["salesOrder"],
          "summary": "Get specific salesOrder in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "sales_order_number",
              "in": "query",
              "description": "get specific invosalesOrderice for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific salesOrder for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesOrder"
                  }
                }
              }
            }
          ]
        }
      },
      "/setting": {
        "get": {
          "tags": ["setting"],
          "summary": "Get all setting in system",
          "description": "Get all setting in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all setting for specific user",
              "type": "number"
            },
            {
              "name": "name",
              "in": "query",
              "description": "get all setting for specific user",
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Setting"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["setting"],
          "summary": "Store setting in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store setting",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Setting"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Setting"
                }
              }
            }
          }
        }
      },
      "/setting/{id}": {
        "put": {
          "tags": ["setting"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "name",
              "in": "body",
              "description": "The is of the recorded setting",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "body",
              "description": "The is of the recorded setting",
              "required": true,
              "type": "number"
            },
            {
              "name": "id",
              "in": "body",
              "description": "The is of the recorded setting",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Setting"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/currency": {
        "get": {
          "tags": ["currency"],
          "summary": "Get all currency in system",
          "description": "Get all currency in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all currency for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Currency"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["currency"],
          "summary": "Store currency in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store currency",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Currency"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Currency"
                }
              }
            }
          }
        }
      },
      "/currency/{id}": {
        "get": {
          "tags": ["currency"],
          "summary": "Get specific currency in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific currency for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Currency"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["currency"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded currency",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Currency"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["currency"],
          "summary": "Delete currency",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The currency id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/currency/{page}/{pageSize}": {
        "get": {
          "tags": ["currency"],
          "summary": "Get all currency in system depends on page and pageSize",
          "description": "Get all currency in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all currency for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Currency"
                  }
                }
              }
            }
          ]
        }
      },
      "/commentHistory": {
        "get": {
          "tags": ["commentHistory"],
          "summary": "Get all commentHistory in system",
          "description": "Get all commentHistory in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all commentHistory for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/CommentHistory"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["commentHistory"],
          "summary": "Store commentHistory in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store commentHistory",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/CommentHistory"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/CommentHistory"
                }
              }
            }
          }
        }
      },
      "/commentHistory/{id}": {
        "get": {
          "tags": ["commentHistory"],
          "summary": "Get specific commentHistory in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific commentHistory for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/CommentHistory"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["commentHistory"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded commentHistory",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/CommentHistory"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["commentHistory"],
          "summary": "Delete commentHistory",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The commentHistory id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/commentHistory/{page}/{pageSize}": {
        "get": {
          "tags": ["commentHistory"],
          "summary": "Get all commentHistory in system depends on page and pageSize",
          "description": "Get all commentHistory in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all commentHistory for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/CommentHistory"
                  }
                }
              }
            }
          ]
        }
      },
      "/commentHistory/comments": {
        "get": {
          "tags": ["commentHistory"],
          "summary": "Get specific commentHistory in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "ref_type",
              "in": "query",
              "description": "get specific commentHistory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "ref_number",
              "in": "query",
              "description": "get specific commentHistory for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific commentHistory for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/CommentHistory"
                  }
                }
              }
            }
          ]
        }
      },
      "/bills": {
        "get": {
          "tags": ["bills"],
          "summary": "Get all bills in system",
          "description": "Get all bills in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all bills for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Bills"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["bills"],
          "summary": "Store bills in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store bills",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Bills"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Bills"
                }
              }
            }
          }
        }
      },
      "/bills/{id}": {
        "get": {
          "tags": ["bills"],
          "summary": "Get specific bills in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific bills for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Bills"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["bills"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded bills",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/Bills"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["bills"],
          "summary": "Delete bills",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The bills id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/bills/{page}/{pageSize}": {
        "get": {
          "tags": ["bills"],
          "summary": "Get all bills in system depends on page and pageSize",
          "description": "Get all bills in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all bills for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Bills"
                  }
                }
              }
            }
          ]
        }
      },
      "/bills/exist": {
        "get": {
          "tags": ["bills"],
          "summary": "Get specific bills in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "bill_number",
              "in": "query",
              "description": "get specific bills for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific bills for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Bills"
                  }
                }
              }
            }
          ]
        }
      },
      "/bills/findByPO": {
        "get": {
          "tags": ["bills"],
          "summary": "Get specific bills in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "order_number",
              "in": "query",
              "description": "get specific bills for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific bills for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/Bills"
                  }
                }
              }
            }
          ]
        }
      },
      "/transferReceive": {
        "get": {
          "tags": ["transferReceive"],
          "summary": "Get all transferReceive in system",
          "description": "Get all transferReceive in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all transferReceive for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferReceive"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["transferReceive"],
          "summary": "Store transferReceive in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store transferReceive",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/TransferReceive"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/TransferReceive"
                }
              }
            }
          }
        }
      },
      "/transferReceive/{id}": {
        "get": {
          "tags": ["transferReceive"],
          "summary": "Get specific transferReceive in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific transferReceive for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferReceive"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["transferReceive"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded transferReceive",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/TransferReceive"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["transferReceive"],
          "summary": "Delete transferReceive",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The transferReceive id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/transferReceive/{page}/{pageSize}": {
        "get": {
          "tags": ["transferReceive"],
          "summary": "Get all transferReceive in system depends on page and pageSize",
          "description": "Get all transferReceive in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all transferReceive for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferReceive"
                  }
                }
              }
            }
          ]
        }
      },
      "/transferOrder": {
        "get": {
          "tags": ["transferOrder"],
          "summary": "Get all transferOrder in system",
          "description": "Get all transferOrder in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all transferOrder for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferOrder"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["transferOrder"],
          "summary": "Store transferOrder in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store transferOrder",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/TransferOrder"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/TransferOrder"
                }
              }
            }
          }
        }
      },
      "/transferOrder/{id}": {
        "get": {
          "tags": ["transferOrder"],
          "summary": "Get specific transferOrder in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific transferOrder for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferOrder"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["transferOrder"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded transferOrder",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/TransferOrder"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["transferOrder"],
          "summary": "Delete transferOrder",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The transferOrder id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/transferOrder/{page}/{pageSize}": {
        "get": {
          "tags": ["transferOrder"],
          "summary": "Get all transferOrder in system depends on page and pageSize",
          "description": "Get all transferOrder in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all transferOrder for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferOrder"
                  }
                }
              }
            }
          ]
        }
      },
      "/transferOrder/exist": {
        "get": {
          "tags": ["transferOrder"],
          "summary": "Get specific transferOrder in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "transfer_order_number",
              "in": "query",
              "description": "get specific transferOrder for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific transferOrder for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/TransferOrder"
                  }
                }
              }
            }
          ]
        }
      },
      "/SalesPackage": {
        "get": {
          "tags": ["SalesPackage"],
          "summary": "Get all SalesPackage in system",
          "description": "Get all SalesPackage in system",
          "operationId": "findAll",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all SalesPackage for specific user",
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesPackage"
                  }
                }
              }
            }
          ]
        },
        "post": {
          "tags": ["SalesPackage"],
          "summary": "Store SalesPackage in system",
          "description": "",
          "operationId": "store",
          "consumes": ["application/json"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Store SalesPackage",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SalesPackage"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SalesPackage"
                }
              }
            }
          }
        }
      },
      "/SalesPackage/{id}": {
        "get": {
          "tags": ["SalesPackage"],
          "summary": "Get specific SalesPackage in system",
          "description": "",
          "operationId": "findById",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "get specific SalesPackage for specific user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesPackage"
                  }
                }
              }
            }
          ]
        },
        "put": {
          "tags": ["SalesPackage"],
          "summary": "Update as existing brand",
          "description": "",
          "operationId": "update",
          "consumes": ["application/json", "application/xml"],
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The is of the recorded SalesPackage",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Item object that needs to be added to the store",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definations/SalesPackage"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        },
        "delete": {
          "tags": ["SalesPackage"],
          "summary": "Delete SalesPackage",
          "description": "This can only be done by the logged in user.",
          "operationId": "destroy",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The SalesPackage id that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            }
          }
        }
      },
      "/SalesPackage/{page}/{pageSize}": {
        "get": {
          "tags": ["SalesPackage"],
          "summary": "Get all SalesPackage in system depends on page and pageSize",
          "description": "Get all SalesPackage in system by using pagenation",
          "operationId": "findByPagination",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "client_id",
              "in": "query",
              "description": "get all SalesPackage for specific user",
              "type": "number"
            },
            {
              "name": "page",
              "in": "path",
              "description": "User want to see which page record",
              "required": true,
              "type": "string"
            },
            {
              "name": "pageSize",
              "in": "path",
              "description": "User want to see the number of records",
              "required": true,
              "type": "string"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesPackage"
                  }
                }
              }
            }
          ]
        }
      },
      "/SalesPackage/exist": {
        "get": {
          "tags": ["SalesPackage"],
          "summary": "Get specific SalesPackage in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "sp_number",
              "in": "query",
              "description": "get specific SalesPackage for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific SalesPackage for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesPackage"
                  }
                }
              }
            }
          ]
        }
      },
      "/SalesPackage/findByPO": {
        "get": {
          "tags": ["SalesPackage"],
          "summary": "Get specific SalesPackage in system",
          "description": "",
          "operationId": "exist",
          "produces": ["application/json", "application/xml"],
          "parameters": [
            {
              "name": "sales_order_number",
              "in": "query",
              "description": "get specific SalesPackage for specific user",
              "required": true,
              "type": "string"
            },
            {
              "name": "client_id",
              "in": "query",
              "description": "get specific SalesPackage for specific user",
              "required": true,
              "type": "number"
            }
          ],
          "responses": [
            {
              "200": {
                "description": "successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definations/SalesPackage"
                  }
                }
              }
            }
          ]
        }
      }
  },

  "definations": {
    "Category": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
        "type": "string"
        },
        "status": {
        "type": "integer"
        },
        "tax": {
        "type": "object"
        },
        "client_id": {
        "type": "integer"
        }
      }
    },
    "Attribute": {
      "type": "object",
      "required": ["attributeName", "attributeValue", "status", "client_id"],
      "properties": {
        "attributeName": {
        "type": "string"
        },
        "attributeValue": {
        "type": "array",
        "xml": {
          "wrapped": true
          },
          "items": {
            "type": "string",
            "xml": {
            "name": "attributeValue"
            }
          }
        },
        "client_id": {
        "type": "integer"
        },
        "status": {
        "type": "integer"
        }
      }
    },
    "Item": {
      "type": "object",
      "required": ["item_name", "item_unit", "client_id"],
      "properties": {
        "item_name": {
        "type": "string"
        },
        "type": {
        "type": "string"
        },
        "item_sku": {
        "type": "string"
        },
        "combo_products": {
        "type": "array",
        "xml": {
          "wrapped": true
          },
          "items": {
            "type": "string",
            "xml": {
            "name": "combo_products"
            }
          }
        },
        "item_type": {
          "type": "string"
          
          },
        "item_category": {
        "type": "string"
        },
        "subcategory": {
        "type": "object"
        },
        "item_unit": {
        "type": "object"
        },
        "sub_subcategory": {
        "type": "object"
        },
        "tag": {
          "type": "array",
          "xml": {
            "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
              "name": "tag"
              }
            }
          },
        "expiry_date": {
          "type": "string"
          },
        "returnable": {
          "type": "boolean"
          },
        "item_dimension_length": {
          "type": "string"
          },
        "item_dimension_width": {
          "type": "string"
          },
        "item_dimension_height": {
          "type": "string"
          },
        "item_manufacturer": {
          "type": "object"
          },
        "item_upc": {
          "type": "string"
          },
        "item_ean": {
          "type": "string"
          },
        "item_weight": {
          "type": "string"
          },
        "item_brand": {
          "type": "object"
          },
        "item_mpn": {
          "type": "string"
          },
        "item_isbn": {
          "type": "string"
          },
        "sales_information": {
          "type": "string"
          },
        "item_selling_price": {
         "type": "integer"
        },
        "item_cost_price": {
         "type": "integer"
        },
        "item_account_sales": {
          "type": "string"
          },
        "item_sales_description": {
          "type": "string"
          },
        "purchase_information": {
          "type": "string"
          },
        "item_account_purchase": {
          "type": "string"
          },
        "item_purchase_description": {
          "type": "string"
          },
        "track_inventory": {
          "type": "string"
          },
        "inventory_account": {
          "type": "string"
          },
        "attachments": {
          "type": "string"
          },
        "sell_tax": {
          "type": "object"
          },
        "warehouse": {
          "type": "object"
          },
        "preferred_vendor": {
          "type": "string"
          },
        "inventory_opening_stock": {
         "type": "integer"
        },
        "opening_stock_rate_per_unit": {
         "type": "integer"
        },
        "reorder_point": {
         "type": "integer"
        },
        "client_id": {
        "type": "integer"
        }
      }
    },
    "Warehouse": {
      "type": "object",
      "required": ["name", "short_code", "phone", "email", "client_id"],
      "properties": {
        "name": {
        "type": "string"
        },
        "short_code": {
        "type": "string"
        },
        "street": {
        "type": "string"
        },
        "city": {
        "type": "string"
        },
        "zip": {
        "type": "string"
        },
        "state": {
        "type": "string"
        },
        "country": {
        "type": "string"
        },
        "phone": {
        "type": "string"
        },
        "email": {
        "type": "string"
        },
        "client_id": {
        "type": "integer"
        }
      }
    },
    "LoyalityPoint": {
      "type": "object",
      "required": ["salesOrderNumber", "value", "client_id"],
      "properties": {
        "salesOrderNumber": {
        "type": "string"
        },
        "value": {
        "type": "integer"
        },
        "client_id": {
        "type": "integer"
        }
      }
    },
    "Template": {
      "type": "object",
      "required": ["tags", "property", "client_id"],
      "properties": {
        "attributeName": {
        "type": "string"
        },
        "tags": {
        "type": "array",
          "items": {
            }
          },
        "client_id": {
        "type": "integer"
        },
        "status": {
        "type": "integer"
        }
      }
    },
    "SubSubcategory": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
        "type": "string"
        },
        "status": {
          "type": "integer"
          },
        "subcategory": {
        "type": "object"
        },
        "client_id": {
        "type": "integer"
        }
      }
    },
    "SubCategory": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "category": {
        "type": "object"
        },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "User": {
      "type": "object",
      "required": ["fullname", "email", "username", "password", "client_id"],
      "properties": {
        "fullname": {
         "type": "string"
        },
        "email": {
         "type": "string"
        },
        "username": {
         "type": "string"
        },
        "password": {
         "type": "string"
        },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Weight": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "PaymentMethodType": {
      "type": "object",
      "required": ["name", "status", "client_id"],
        "properties": {
          "name": {
           "type": "string"
          },
          "status": {
            "type": "integer"
            },
          "client_id": {
           "type": "integer"
          }
        }
    },
    "Brand": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Manufacture": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Reason": {
      "type": "object",
      "required": ["name", "status", "client_id","description"],
      "properties": {
        "name": {
         "type": "string"
        },
        "description": {
          "type": "string"
         },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "DeliveryPackage": {
      "type": "object",
      "required": ["name", "rate", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "delivery_partner": {
          "type": "object"
         },
        "rate": {
          "type": "integer"
          },
        "tax": {
          "type": "integer"
          },
        "area": {
          "type": "string"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "DeliveryPartner": {
      "type": "object",
      "required": ["name", "email", "phone", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "email": {
          "type": "string"
         },
        "phone": {
          "type": "string"
          },
        "address": {
          "type": "string"
          },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "PaymentMethod": {
      "type": "object",
      "required": ["name", "paymentMethodType", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "paymentMethodType": {
          "type": "object"
         },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Unit": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Tax": {
      "type": "object",
      "required": ["name", "rate", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "rate": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": ["name", "status", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "status": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Vendor": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "company_name",
        "display_name",
        "email",
        "phone",
        "client_id"
      ],
      "properties": {
        "salutation": {
         "type": "object"
        },
        "first_name": {
         "type": "string"
        },
        "last_name": {
         "type": "string"
        },
        "company_name": {
         "type": "string"
        },
        "display_name": {
         "type": "string"
        },
        "email": {
         "type": "string"
        },
        "phone": {
         "type": "string"
        },
        "website": {
         "type": "string"
        },
        "tags": {
          "type": "array",
            "items": {
              }
          },
        "currency": {
         "type": "object"
        },
        "tax_rate": {
         "type": "object"
        },
        "payment_term": {
         "type": "object"
        },
        "facebook": {
         "type": "string"
        },
        "twitter": {
         "type": "string"
        },
        "billing_attention": {
         "type": "string"
        },
        "billing_region": {
         "type": "string"
        },
        "billing_address": {
         "type": "string"
        },
        "billing_city": {
         "type": "string"
        },
        "billing_state": {
         "type": "string"
        },
        "billing_zip_code": {
         "type": "string"
        },
        "billing_phone": {
         "type": "string"
        },
        "billing_fax": {
         "type": "string"
        },
        "shipping_attention": {
         "type": "string"
        },
        "shipping_region": {
         "type": "string"
        },
        "shipping_address": {
         "type": "string"
        },
        "shipping_city": {
         "type": "string"
        },
        "shipping_state": {
         "type": "string"
        },
        "shipping_zip_code": {
         "type": "string"
        },
        "shipping_phone": {
         "type": "string"
        },
        "remark": {
         "type": "string"
        },
        "shipping_fax": {
         "type": "string"
        },
       
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "company_name",
        "display_name",
        "email",
        "phone",
        "customer_id_number",
        "client_id"
      ],
      "properties": {
        "salutation": {
         "type": "object"
        },
        "first_name": {
         "type": "string"
        },
        "last_name": {
         "type": "string"
        },
        "customer_id_number": {
         "type": "string"
        },
        "company_name": {
         "type": "string"
        },
        "display_name": {
         "type": "string"
        },
        "email": {
         "type": "string"
        },
        "phone": {
         "type": "string"
        },
        "website": {
         "type": "string"
        },
        "tags": {
          "type": "array",
            "items": {
              }
          },
        "currency": {
         "type": "object"
        },
        "tax_rate": {
         "type": "object"
        },
        "payment_term": {
         "type": "object"
        },
        "facebook": {
         "type": "string"
        },
        "twitter": {
         "type": "string"
        },
        "billing_attention": {
         "type": "string"
        },
        "billing_region": {
         "type": "string"
        },
        "billing_address": {
         "type": "string"
        },
        "billing_city": {
         "type": "string"
        },
        "billing_state": {
         "type": "string"
        },
        "billing_zip_code": {
         "type": "string"
        },
        "billing_phone": {
         "type": "string"
        },
        "billing_fax": {
         "type": "string"
        },
        "shipping_attention": {
         "type": "string"
        },
        "shipping_region": {
         "type": "string"
        },
        "shipping_address": {
         "type": "string"
        },
        "shipping_city": {
         "type": "string"
        },
        "shipping_state": {
         "type": "string"
        },
        "shipping_zip_code": {
         "type": "string"
        },
        "shipping_phone": {
         "type": "string"
        },
        "remark": {
         "type": "string"
        },
        "shipping_fax": {
         "type": "string"
        },
       
        "client_id": {
         "type": "integer"
        }
      }
    },
    "Tooltip": {
      "type": "object",
      "required": ["name", "value", "client_id"],
      "properties": {
        "name": {
         "type": "string"
        },
        "value": {
          "type": "string"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "MailTemplate": {
      "type": "object",
      "required": [
        "template_name",
        "type",
        "subject",
        "description",
        "client_id"
      ],
      "properties": {
        "template_name": {
         "type": "string"
        },
        "type": {
          "type": "string"
          },
        "from": {
          "type": "string"
          },
        "bcc": {
          "type": "string"
          },
        "cc": {
          "type": "string"
          },
        "isDefault": {
          "type": "boolean"
          },
        "subject": {
          "type": "string"
          },
        "description": {
          "type": "string"
          },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "PurchaseOrders": {
      "type": "object",
      "required": [
        "delivery_address",
        "po_number",
        "tax_type",
        "purchase_order_date",
        "expected_delivery_date",
        "itemList",
        "client_id"
      ],
      "properties": {
        "vendor": {
         "type": "string"
        },
        "delivery_address": {
         "type": "object"
        },
        "po_number": {
         "type": "string"
        },
        "tax_type": {
         "type": "string"
        },
        "taxAmount": {
         "type": "integer"
        },
        "tax": {
         "type": "object"
        },
        "tax_rate": {
         "type": "integer"
        },
        "reference": {
         "type": "string"
        },
        "purchase_order_date": {
         "type": "string"
        },
        "expected_delivery_date": {
         "type": "string"
        },
        "shipment_preference": {
         "type": "object"
        },
        "payment_terms": {
         "type": "string"
        },
        "customer_notes": {
         "type": "string"
        },
        "adjustment": {
         "type": "integer"
        },
        "terms_and_condition": {
         "type": "string"
        },
        "itemList": {
          "type": "array",
            "items": {
              }
          },
        "sub_total": {
         "type": "integer"
        },
        "discountValue": {
         "type": "integer"
        },
        "discountType": {
         "type": "string"
        },
        "discountedAmount": {
         "type": "integer"
        },
        "totalSum": {
         "type": "integer"
        },
        "total_quantity": {
         "type": "integer"
        },
        "total_received": {
         "type": "integer"
        },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "PurchaseReceive": {
      "type": "object",
      "required": [
        "pr_number",
        "purchase_order_number",
        "delivery_address",
        "received_date",
        "itemList",
        "total_pr_quantity",
        "client_id"
      ],
      "properties": {
        "pr_number": {
         "type": "string"
        },
        "purchase_order_number": {
         "type": "string"
        },
        "received_date": {
         "type": "string"
        },
        "delivery_address": {
         "type": "object"
        },
        "itemList": {
          "type": "array",
            "items": {
              }
          },
        "note": {
         "type": "string"
        },
        "total_pr_quantity": {
         "type": "integer"
        },
        "client_id": {
         "type": "integer"
        }
      }
    },
    "PaymentTerm": {
        "type": "object",
        "required": ["name", "status", "client_id"],
        "properties": {
          "name": {
           "type": "string"
          },
          "status": {
            "type": "integer"
            },
          "client_id": {
           "type": "integer"
          }
        }
      },
    "ShippingPreferences": {
        "type": "object",
        "required": ["name", "status", "client_id"],
        "properties": {
          "name": {
           "type": "string"
          },
          "status": {
            "type": "integer"
            },
          "client_id": {
           "type": "integer"
          }
        }
      },
    "Loyalityorreedem": {
    "type": "object",
    "required": ["type","rule", "status", "client_id"],
    "properties": {
      "type": {
       "type": "string"
      },
      "status": {
        "type": "integer"
        },
      "rule": {
        "type": "object"
        },
      "client_id": {
       "type": "integer"
      }
    }
    },
    "Campaign": {
        "type": "object",
        "required": ["name", "status", "client_id"],
        "properties": {
          "name": {
           "type": "string"
          },
          "status": {
            "type": "integer"
            },
          "products": {
            "type": "array",
            "items":{
              }
            },
          "discounts": {
            "type": "array",
            "items":{
              }
            },
          "client_id": {
           "type": "integer"
          }
        }
    },
    "ItemWarehouses": {
        "type": "object",
        "required": ["item", "warehouse", "client_id"],
        "properties": {
          "item": {
           "type": "object"
          },
          "warehouse": {
            "type": "object"
            },
          "client_id": {
           "type": "integer"
          }
        }
    },
    "ItemDiscount": {
        "type": "object",
        "required": ["name", "discount_rate", "product","status","client_id"],
        "properties": {
          "name": {
           "type": "string"
          },
          "discount_rate": {
            "type": "integer"
            },
          "status": {
            "type": "integer"
            },
          "product": {
            "type": "string"
            },
          "date_range": {
            "type": "array"
            },
          "client_id": {
           "type": "integer"
          }
        }
    },
    "DiscountManager": {
        "type": "object",
        "required": ["name", "discount_rate", "products","status","client_id"],
        "properties": {
          "name": {
           "type": "string"
          },
          "discount_rate": {
            "type": "integer"
            },
          "products": {
            "type": "array",
            "items":{}
            },
          "status": {
            "type": "integer"
            },
          "date_range": {
            "type": "array"
            },
          "client_id": {
           "type": "integer"
          }
        }
    },
    "ItemInventory": {
      "type": "object",
      "required": ["item", "inventory_type", "po_or_so_number","ordered","bill_or_invoiced","received_or_packaged","client_id"],
      "properties": {
        "item": {
         "type": "string"
        },
        "inventory_type": {
          "type": "string"
          },
        "po_or_so_number": {
          "type": "string"
          },
        "ordered": {
          "type": "integer"
          },
        "bill_or_invoiced": {
          "type": "integer"
          },
        "received_or_packaged": {
          "type": "integer"
          },
        "client_id": {
         "type": "integer"
        }
      }
   },
   "ItemStock": {
    "type": "object",
    "required": ["item", "stock_type", "stock","client_id"],
    "properties": {
      "item": {
       "type": "string"
      },
      "po_or_so_number": {
        "type": "string"
        },
      "pr_number": {
        "type": "string"
        },
      "warehouse_id": {
        "type": "string"
        },
      "stock_type": {
        "type": "string"
        },
      "stock": {
        "type": "integer"
        },
      "expireDate": {
        "type": "string"
        },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "Invoice": {
    "type": "object",
    "required": ["customer", "invoice_number", "order_number","client_id"],
    "properties": {
      "customer": {
       "type": "string"
      },
      "invoice_number": {
       "type": "string"
      },
      "order_number": {
       "type": "string"
      },
      "sales_order": {
       "type": "string"
      },
      "invoice_date": {
       "type": "string"
      },
      "due_date": {
       "type": "string"
      },
      "payment_terms": {
       "type": "string"
      },
      "customer_notes": {
       "type": "string"
      },
      "terms_and_condition": {
       "type": "string"
      },
      "itemList": {
        "type": "array",
          "items": {
            }
        },
      "sub_total": {
       "type": "integer"
      },
      "discountValue": {
       "type": "integer"
      },
      "discountType": {
       "type": "string"
      },
      "discountedAmount": {
       "type": "integer"
      },
      "adjustment": {
       "type": "integer"
      },
      "totalSum": {
       "type": "integer"
      },
      "payment_method": {
       "type": "object"
      },
      "customer_ui": {
       "type": "object"
      },
      "isAutoGenerate": {
       "type": "boolean"
      },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "SalesOrder": {
    "type": "object",
    "required": ["customer", "sales_order_number", "status","expected_shipment_date","client_id"],
    "properties": {
      "customer": {
       "type": "string"
      },
      "customer_address": {
       "type": "object"
      },
      "sales_order_number": {
       "type": "string"
      },
      "status": {
       "type": "string"
      },
      "reference": {
       "type": "string"
      },
      "sales_order_date": {
       "type": "string"
      },
      "expected_shipment_date": {
       "type": "string"
      },
      "payment_terms": {
       "type": "string"
      },
      "delivery_method": {
       "type": "string"
      },
      "payment_method": {
       "type": "object"
      },
      "tag": {
        "type": "array",
          "items": {
            }
        },
      "itemList": {
        "type": "array",
          "items": {
            }
        },
      "warehouse": {
       "type": "string"
      },
      "sales_person": {
       "type": "string"
      },
      "discount_value": {
       "type": "integer"
      },
      "delivery_charge": {
       "type": "integer"
      },
      "shipping_charge": {
       "type": "integer"
      },
      "adjustment": {
       "type": "integer"
      },
      "taxAmount": {
       "type": "integer"
      },
      "customer_notes": {
       "type": "string"
      },
      "terms_and_condition": {
       "type": "string"
      },
      "sub_total": {
       "type": "integer"
      },
      "discount_type": {
       "type": "string"
      },
      "discounted_amount": {
       "type": "integer"
      },
      "total_sum": {
       "type": "integer"
      },
      "total_packaged": {
       "type": "integer"
      },
      "total_quantity": {
       "type": "integer"
      },
      "total_invoiced": {
       "type": "integer"
      },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "Setting": {
    "type": "object",
    "required": ["name", "value","client_id"],
    "properties": {
      "name": {
       "type": "string"
      },
      "value": {
        "type": "object"
        },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "Currency": {
    "type": "object",
    "required": ["currency_code", "currency_symbol","currency_name","client_id"],
    "properties": {
      "currency_code": {
       "type": "string"
      },
      "currency_symbol": {
        "type": "string"
        },
      "currency_name": {
        "type": "string"
        },
      "decimal_places": {
        "type": "string"
        },
      "format": {
        "type": "object"
        },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "CommentHistory": {
    "type": "object",
    "required": ["title", "ref_type","ref_number","client_id"],
    "properties": {
      "title": {
       "type": "string"
      },
      "ref_type": {
        "type": "string"
        },
      "ref_number": {
        "type": "string"
        },
      "author": {
        "type": "string"
        },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "Bills": {
    "type": "object",
    "required": ["vendor", "bill_number","order_number","tax_type","total_quantity","client_id"],
    "properties": {
      "vendor": {
       "type": "string"
      },
      "vendor_address": {
       "type": "object"
      },
      "bill_number": {
       "type": "string"
      },
      "order_number": {
       "type": "string"
      },
      "purchase_order": {
       "type": "string"
      },
      "bill_date": {
       "type": "string"
      },
      "due_date": {
       "type": "string"
      },
      "payment_terms": {
       "type": "object"
      },
      "tax_type": {
       "type": "string"
      },
      "taxAmount": {
       "type": "integer"
      },
      "itemList": {
        "type": "array",
          "items": {
            }
        },
      "tax": {
       "type": "object"
      },
      "tax_rate": {
       "type": "integer"
      },
      "customer_notes": {
       "type": "integer"
      },
      "terms_and_condition": {
        "type": "string"
       },
      "sub_total": {
      "type": "integer"
      },
      "discountValue": {
       "type": "integer"
      },
      "discountType": {
       "type": "string"
      },
      "discountedAmount": {
       "type": "integer"
      },
      "adjustment": {
       "type": "integer"
      },
      "totalSum": {
       "type": "integer"
      },
      "total_quantity": {
       "type": "integer"
      },
      "vendor_ui": {
       "type": "object"
      },
      "isAutoGenerate": {
       "type": "boolean"
      },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "TransferReceive": {
    "type": "object",
    "required": ["tr_number","client_id"],
    "properties": {
      "tr_number": {
       "type": "string"
      },
      "transfer_order": {
       "type": "string"
      },
      "received_date": {
       "type": "string"
      },
      "itemList": {
        "type": "array",
          "items": {
            }
        },
      "note": {
       "type": "string"
      },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "TransferOrder": {
    "type": "object",
    "required": ["transfer_order_number","reference_number","status","itemList","client_id"],
    "properties": {
      "transfer_order_number": {
       "type": "string"
      },
      "transfer_order_date": {
       "type": "string"
      },
      "reference_number": {
       "type": "string"
      },
      "reasons": {
        "type": "array",
        "items":{}
        },
      "tags": {
        "type": "array",
        "items":{}
        },
      "source": {
        "type": "object"
        },
      "destination": {
        "type": "object"
        },
      "status": {
       "type": "string"
      },
      "total_transfered": {
       "type": "integer"
      },
      "total_received": {
       "type": "integer"
      },
      "itemList": {
       "type": "array",
       "items":{}
      },
      "delivery_method": {
       "type": "object"
      },
      "delivery_partner": {
       "type": "object"
      },
      "total_weight": {
       "type": "string"
      },
      "contact_person": {
       "type": "string"
      },
      "remark": {
       "type": "string"
      },
      "created_by": {
       "type": "string"
      },
      "source_ui": {
       "type": "object"
      },
      "destination_ui": {
       "type": "object"
      },
      "isAutoGenerate": {
       "type": "boolean"
      },
      "client_id": {
       "type": "integer"
      }
    }
   },
   "SalesPackage": {
    "type": "object",
    "required": ["sp_number","sales_order_number","packaged_date","itemList","total_sp_quantity","client_id"],
    "properties": {
      "sp_number": {
       "type": "string"
      },
      "sales_order_number": {
       "type": "string"
      },
      "note": {
       "type": "string"
      },
      "packaged_date": {
       "type": "string"
      },
      "itemList": {
        "type": "array",
          "items": {
            }
        },
      "total_sp_quantity": {
       "type": "integer"
      },
      "isAutoGenerate": {
       "type": "boolean"
      },
      "client_id": {
       "type": "integer"
      }
    }
   }
  }
}
